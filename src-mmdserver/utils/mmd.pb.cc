// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmd.proto

#include "mmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mmdtranfer {
class MessageHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageHeader> _instance;
} _MessageHeader_default_instance_;
class UserTrendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserTrend> _instance;
} _UserTrend_default_instance_;
class PlayerStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerState> _instance;
} _PlayerState_default_instance_;
}  // namespace mmdtranfer
static void InitDefaultsscc_info_MessageHeader_mmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mmdtranfer::_MessageHeader_default_instance_;
    new (ptr) ::mmdtranfer::MessageHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mmdtranfer::MessageHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageHeader_mmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MessageHeader_mmd_2eproto}, {}};

static void InitDefaultsscc_info_PlayerState_mmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.DefaultConstruct();
  *::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get_mutable() = std::string("basic", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get_mutable());
  {
    void* ptr = &::mmdtranfer::_PlayerState_default_instance_;
    new (ptr) ::mmdtranfer::PlayerState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mmdtranfer::PlayerState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerState_mmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayerState_mmd_2eproto}, {}};

static void InitDefaultsscc_info_UserTrend_mmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mmdtranfer::_UserTrend_default_instance_;
    new (ptr) ::mmdtranfer::UserTrend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mmdtranfer::UserTrend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserTrend_mmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserTrend_mmd_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mmd_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mmd_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::MessageHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::MessageHeader, version_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::MessageHeader, messageid_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::MessageHeader, contenttype_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::MessageHeader, bodysize_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::UserTrend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::UserTrend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::UserTrend, userid_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::UserTrend, trendtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, userid_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, motion_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, speed_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, positionx_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, positiony_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, positionz_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, scalex_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, scaley_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, scalez_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, rotatex_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, rotatey_),
  PROTOBUF_FIELD_OFFSET(::mmdtranfer::PlayerState, rotatez_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mmdtranfer::MessageHeader)},
  { 13, 20, sizeof(::mmdtranfer::UserTrend)},
  { 22, 39, sizeof(::mmdtranfer::PlayerState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mmdtranfer::_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mmdtranfer::_UserTrend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mmdtranfer::_PlayerState_default_instance_),
};

const char descriptor_table_protodef_mmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmmd.proto\022\nmmdtranfer\"\232\002\n\rMessageHeade"
  "r\022>\n\007version\030\001 \002(\0162\".mmdtranfer.MessageH"
  "eader.Versions:\tVERSION1X\022\024\n\tmessageid\030\002"
  " \002(\r:\0010\022E\n\013contenttype\030\003 \002(\0162%.mmdtranfe"
  "r.MessageHeader.ContentType:\tUNIVERSAL\022\023"
  "\n\010bodysize\030\004 \002(\r:\0010\"\031\n\010Versions\022\r\n\tVERSI"
  "ON1X\020\001\"<\n\013ContentType\022\r\n\tUNIVERSAL\020\000\022\r\n\t"
  "UserTrend\020\001\022\017\n\013PlayerState\020\002\"\214\001\n\tUserTre"
  "nd\022\021\n\006userid\030\001 \002(\004:\0010\0222\n\ttrendtype\030\002 \002(\016"
  "2\037.mmdtranfer.UserTrend.TrendType\"8\n\tTre"
  "ndType\022\010\n\004Join\020\000\022\t\n\005Leave\020\001\022\t\n\005Watch\020\002\022\013"
  "\n\007Control\020\003\"\342\001\n\013PlayerState\022\021\n\006userid\030\001 "
  "\002(\004:\0010\022\025\n\006motion\030\002 \002(\t:\005basic\022\r\n\005speed\030\003"
  " \002(\002\022\021\n\tpositionx\030\004 \002(\002\022\021\n\tpositiony\030\005 \002"
  "(\002\022\021\n\tpositionz\030\006 \002(\002\022\016\n\006scalex\030\007 \002(\002\022\016\n"
  "\006scaley\030\010 \002(\002\022\016\n\006scalez\030\t \002(\002\022\017\n\007rotatex"
  "\030\n \002(\002\022\017\n\007rotatey\030\013 \002(\002\022\017\n\007rotatez\030\014 \002(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mmd_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mmd_2eproto_sccs[3] = {
  &scc_info_MessageHeader_mmd_2eproto.base,
  &scc_info_PlayerState_mmd_2eproto.base,
  &scc_info_UserTrend_mmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mmd_2eproto_once;
static bool descriptor_table_mmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mmd_2eproto = {
  &descriptor_table_mmd_2eproto_initialized, descriptor_table_protodef_mmd_2eproto, "mmd.proto", 680,
  &descriptor_table_mmd_2eproto_once, descriptor_table_mmd_2eproto_sccs, descriptor_table_mmd_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_mmd_2eproto::offsets,
  file_level_metadata_mmd_2eproto, 3, file_level_enum_descriptors_mmd_2eproto, file_level_service_descriptors_mmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mmd_2eproto), true);
namespace mmdtranfer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_Versions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mmd_2eproto);
  return file_level_enum_descriptors_mmd_2eproto[0];
}
bool MessageHeader_Versions_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MessageHeader_Versions MessageHeader::VERSION1X;
constexpr MessageHeader_Versions MessageHeader::Versions_MIN;
constexpr MessageHeader_Versions MessageHeader::Versions_MAX;
constexpr int MessageHeader::Versions_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mmd_2eproto);
  return file_level_enum_descriptors_mmd_2eproto[1];
}
bool MessageHeader_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MessageHeader_ContentType MessageHeader::UNIVERSAL;
constexpr MessageHeader_ContentType MessageHeader::UserTrend;
constexpr MessageHeader_ContentType MessageHeader::PlayerState;
constexpr MessageHeader_ContentType MessageHeader::ContentType_MIN;
constexpr MessageHeader_ContentType MessageHeader::ContentType_MAX;
constexpr int MessageHeader::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserTrend_TrendType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mmd_2eproto);
  return file_level_enum_descriptors_mmd_2eproto[2];
}
bool UserTrend_TrendType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserTrend_TrendType UserTrend::Join;
constexpr UserTrend_TrendType UserTrend::Leave;
constexpr UserTrend_TrendType UserTrend::Watch;
constexpr UserTrend_TrendType UserTrend::Control;
constexpr UserTrend_TrendType UserTrend::TrendType_MIN;
constexpr UserTrend_TrendType UserTrend::TrendType_MAX;
constexpr int UserTrend::TrendType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MessageHeader::InitAsDefaultInstance() {
}
class MessageHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageHeader>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_messageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contenttype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bodysize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MessageHeader::MessageHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mmdtranfer.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&messageid_, &from.messageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&messageid_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:mmdtranfer.MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::memset(&messageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bodysize_) -
      reinterpret_cast<char*>(&messageid_)) + sizeof(bodysize_));
  version_ = 1;
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:mmdtranfer.MessageHeader)
  SharedDtor();
}

void MessageHeader::SharedDtor() {
}

void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageHeader& MessageHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageHeader_mmd_2eproto.base);
  return *internal_default_instance();
}


void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mmdtranfer.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&messageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bodysize_) -
        reinterpret_cast<char*>(&messageid_)) + sizeof(bodysize_));
    version_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mmdtranfer.MessageHeader.Versions version = 1 [default = VERSION1X];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mmdtranfer::MessageHeader_Versions_IsValid(val))) {
            set_version(static_cast<::mmdtranfer::MessageHeader_Versions>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 messageid = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_messageid(&has_bits);
          messageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mmdtranfer.MessageHeader.ContentType contenttype = 3 [default = UNIVERSAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mmdtranfer::MessageHeader_ContentType_IsValid(val))) {
            set_contenttype(static_cast<::mmdtranfer::MessageHeader_ContentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 bodysize = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bodysize(&has_bits);
          bodysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mmdtranfer.MessageHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mmdtranfer.MessageHeader.Versions version = 1 [default = VERSION1X];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mmdtranfer::MessageHeader_Versions_IsValid(value)) {
            set_version(static_cast< ::mmdtranfer::MessageHeader_Versions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 messageid = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_messageid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mmdtranfer.MessageHeader.ContentType contenttype = 3 [default = UNIVERSAL];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mmdtranfer::MessageHeader_ContentType_IsValid(value)) {
            set_contenttype(static_cast< ::mmdtranfer::MessageHeader_ContentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bodysize = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_bodysize(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodysize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mmdtranfer.MessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mmdtranfer.MessageHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mmdtranfer.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mmdtranfer.MessageHeader.Versions version = 1 [default = VERSION1X];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->version(), output);
  }

  // required uint32 messageid = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->messageid(), output);
  }

  // required .mmdtranfer.MessageHeader.ContentType contenttype = 3 [default = UNIVERSAL];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->contenttype(), output);
  }

  // required uint32 bodysize = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->bodysize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mmdtranfer.MessageHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmdtranfer.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mmdtranfer.MessageHeader.Versions version = 1 [default = VERSION1X];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->version(), target);
  }

  // required uint32 messageid = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->messageid(), target);
  }

  // required .mmdtranfer.MessageHeader.ContentType contenttype = 3 [default = UNIVERSAL];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->contenttype(), target);
  }

  // required uint32 bodysize = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->bodysize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmdtranfer.MessageHeader)
  return target;
}

size_t MessageHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mmdtranfer.MessageHeader)
  size_t total_size = 0;

  if (has_messageid()) {
    // required uint32 messageid = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->messageid());
  }

  if (has_contenttype()) {
    // required .mmdtranfer.MessageHeader.ContentType contenttype = 3 [default = UNIVERSAL];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->contenttype());
  }

  if (has_bodysize()) {
    // required uint32 bodysize = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bodysize());
  }

  if (has_version()) {
    // required .mmdtranfer.MessageHeader.Versions version = 1 [default = VERSION1X];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->version());
  }

  return total_size;
}
size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmdtranfer.MessageHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 messageid = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->messageid());

    // required .mmdtranfer.MessageHeader.ContentType contenttype = 3 [default = UNIVERSAL];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->contenttype());

    // required uint32 bodysize = 4 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bodysize());

    // required .mmdtranfer.MessageHeader.Versions version = 1 [default = VERSION1X];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mmdtranfer.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mmdtranfer.MessageHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mmdtranfer.MessageHeader)
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mmdtranfer.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      messageid_ = from.messageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      contenttype_ = from.contenttype_;
    }
    if (cached_has_bits & 0x00000004u) {
      bodysize_ = from.bodysize_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mmdtranfer.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmdtranfer.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(messageid_, other->messageid_);
  swap(contenttype_, other->contenttype_);
  swap(bodysize_, other->bodysize_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserTrend::InitAsDefaultInstance() {
}
class UserTrend::_Internal {
 public:
  using HasBits = decltype(std::declval<UserTrend>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trendtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserTrend::UserTrend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mmdtranfer.UserTrend)
}
UserTrend::UserTrend(const UserTrend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trendtype_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(trendtype_));
  // @@protoc_insertion_point(copy_constructor:mmdtranfer.UserTrend)
}

void UserTrend::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trendtype_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(trendtype_));
}

UserTrend::~UserTrend() {
  // @@protoc_insertion_point(destructor:mmdtranfer.UserTrend)
  SharedDtor();
}

void UserTrend::SharedDtor() {
}

void UserTrend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserTrend& UserTrend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserTrend_mmd_2eproto.base);
  return *internal_default_instance();
}


void UserTrend::Clear() {
// @@protoc_insertion_point(message_clear_start:mmdtranfer.UserTrend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trendtype_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(trendtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserTrend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 userid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mmdtranfer.UserTrend.TrendType trendtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mmdtranfer::UserTrend_TrendType_IsValid(val))) {
            set_trendtype(static_cast<::mmdtranfer::UserTrend_TrendType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserTrend::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mmdtranfer.UserTrend)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_userid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mmdtranfer.UserTrend.TrendType trendtype = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mmdtranfer::UserTrend_TrendType_IsValid(value)) {
            set_trendtype(static_cast< ::mmdtranfer::UserTrend_TrendType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mmdtranfer.UserTrend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mmdtranfer.UserTrend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserTrend::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mmdtranfer.UserTrend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 userid = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // required .mmdtranfer.UserTrend.TrendType trendtype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->trendtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mmdtranfer.UserTrend)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserTrend::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmdtranfer.UserTrend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 userid = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // required .mmdtranfer.UserTrend.TrendType trendtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->trendtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmdtranfer.UserTrend)
  return target;
}

size_t UserTrend::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mmdtranfer.UserTrend)
  size_t total_size = 0;

  if (has_userid()) {
    // required uint64 userid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  if (has_trendtype()) {
    // required .mmdtranfer.UserTrend.TrendType trendtype = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trendtype());
  }

  return total_size;
}
size_t UserTrend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmdtranfer.UserTrend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 userid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->userid());

    // required .mmdtranfer.UserTrend.TrendType trendtype = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trendtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTrend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mmdtranfer.UserTrend)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTrend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserTrend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mmdtranfer.UserTrend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mmdtranfer.UserTrend)
    MergeFrom(*source);
  }
}

void UserTrend::MergeFrom(const UserTrend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mmdtranfer.UserTrend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      trendtype_ = from.trendtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserTrend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mmdtranfer.UserTrend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTrend::CopyFrom(const UserTrend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmdtranfer.UserTrend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTrend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserTrend::InternalSwap(UserTrend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
  swap(trendtype_, other->trendtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTrend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerState::InitAsDefaultInstance() {
}
class PlayerState::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerState>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_positionx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_positiony(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_positionz(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scalex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scaley(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scalez(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rotatex(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rotatey(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rotatez(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlayerState::_i_give_permission_to_break_this_code_default_motion_;
PlayerState::PlayerState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mmdtranfer.PlayerState)
}
PlayerState::PlayerState(const PlayerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  motion_.UnsafeSetDefault(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get());
  if (from.has_motion()) {
    motion_.AssignWithDefault(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get(), from.motion_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotatez_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(rotatez_));
  // @@protoc_insertion_point(copy_constructor:mmdtranfer.PlayerState)
}

void PlayerState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerState_mmd_2eproto.base);
  motion_.UnsafeSetDefault(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotatez_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(rotatez_));
}

PlayerState::~PlayerState() {
  // @@protoc_insertion_point(destructor:mmdtranfer.PlayerState)
  SharedDtor();
}

void PlayerState::SharedDtor() {
  motion_.DestroyNoArena(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get());
}

void PlayerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerState& PlayerState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerState_mmd_2eproto.base);
  return *internal_default_instance();
}


void PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:mmdtranfer.PlayerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    motion_.UnsafeMutablePointer()->assign(*&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get());
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scaley_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(scaley_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&scalez_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotatez_) -
        reinterpret_cast<char*>(&scalez_)) + sizeof(rotatez_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 userid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string motion = 2 [default = "basic"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_motion(), ptr, ctx, "mmdtranfer.PlayerState.motion");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float positionx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_positionx(&has_bits);
          positionx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float positiony = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_positiony(&has_bits);
          positiony_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float positionz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_positionz(&has_bits);
          positionz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float scalex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_scalex(&has_bits);
          scalex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float scaley = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_scaley(&has_bits);
          scaley_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float scalez = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_scalez(&has_bits);
          scalez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float rotatex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_rotatex(&has_bits);
          rotatex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float rotatey = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_rotatey(&has_bits);
          rotatey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float rotatez = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_rotatez(&has_bits);
          rotatez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mmdtranfer.PlayerState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 userid = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_userid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string motion = 2 [default = "basic"];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_motion()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->motion().data(), static_cast<int>(this->motion().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "mmdtranfer.PlayerState.motion");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float speed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float positionx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_positionx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float positiony = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_positiony(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float positionz = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_positionz(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float scalex = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_scalex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float scaley = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_scaley(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaley_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float scalez = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_scalez(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rotatex = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_rotatex(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rotatey = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_rotatey(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rotatez = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_rotatez(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mmdtranfer.PlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mmdtranfer.PlayerState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mmdtranfer.PlayerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 userid = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // required string motion = 2 [default = "basic"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->motion().data(), static_cast<int>(this->motion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mmdtranfer.PlayerState.motion");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->motion(), output);
  }

  // required float speed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // required float positionx = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->positionx(), output);
  }

  // required float positiony = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->positiony(), output);
  }

  // required float positionz = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->positionz(), output);
  }

  // required float scalex = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->scalex(), output);
  }

  // required float scaley = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->scaley(), output);
  }

  // required float scalez = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->scalez(), output);
  }

  // required float rotatex = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->rotatex(), output);
  }

  // required float rotatey = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->rotatey(), output);
  }

  // required float rotatez = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->rotatez(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mmdtranfer.PlayerState)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmdtranfer.PlayerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 userid = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // required string motion = 2 [default = "basic"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->motion().data(), static_cast<int>(this->motion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mmdtranfer.PlayerState.motion");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->motion(), target);
  }

  // required float speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // required float positionx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->positionx(), target);
  }

  // required float positiony = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->positiony(), target);
  }

  // required float positionz = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->positionz(), target);
  }

  // required float scalex = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->scalex(), target);
  }

  // required float scaley = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->scaley(), target);
  }

  // required float scalez = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->scalez(), target);
  }

  // required float rotatex = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->rotatex(), target);
  }

  // required float rotatey = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->rotatey(), target);
  }

  // required float rotatez = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->rotatez(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmdtranfer.PlayerState)
  return target;
}

size_t PlayerState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mmdtranfer.PlayerState)
  size_t total_size = 0;

  if (has_motion()) {
    // required string motion = 2 [default = "basic"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->motion());
  }

  if (has_userid()) {
    // required uint64 userid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->userid());
  }

  if (has_speed()) {
    // required float speed = 3;
    total_size += 1 + 4;
  }

  if (has_positionx()) {
    // required float positionx = 4;
    total_size += 1 + 4;
  }

  if (has_positiony()) {
    // required float positiony = 5;
    total_size += 1 + 4;
  }

  if (has_positionz()) {
    // required float positionz = 6;
    total_size += 1 + 4;
  }

  if (has_scalex()) {
    // required float scalex = 7;
    total_size += 1 + 4;
  }

  if (has_scaley()) {
    // required float scaley = 8;
    total_size += 1 + 4;
  }

  if (has_scalez()) {
    // required float scalez = 9;
    total_size += 1 + 4;
  }

  if (has_rotatex()) {
    // required float rotatex = 10;
    total_size += 1 + 4;
  }

  if (has_rotatey()) {
    // required float rotatey = 11;
    total_size += 1 + 4;
  }

  if (has_rotatez()) {
    // required float rotatez = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmdtranfer.PlayerState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required string motion = 2 [default = "basic"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->motion());

    // required uint64 userid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->userid());

    // required float speed = 3;
    total_size += 1 + 4;

    // required float positionx = 4;
    total_size += 1 + 4;

    // required float positiony = 5;
    total_size += 1 + 4;

    // required float positionz = 6;
    total_size += 1 + 4;

    // required float scalex = 7;
    total_size += 1 + 4;

    // required float scaley = 8;
    total_size += 1 + 4;

    // required float scalez = 9;
    total_size += 1 + 4;

    // required float rotatex = 10;
    total_size += 1 + 4;

    // required float rotatey = 11;
    total_size += 1 + 4;

    // required float rotatez = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mmdtranfer.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mmdtranfer.PlayerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mmdtranfer.PlayerState)
    MergeFrom(*source);
  }
}

void PlayerState::MergeFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mmdtranfer.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      motion_.AssignWithDefault(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get(), from.motion_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      positionx_ = from.positionx_;
    }
    if (cached_has_bits & 0x00000010u) {
      positiony_ = from.positiony_;
    }
    if (cached_has_bits & 0x00000020u) {
      positionz_ = from.positionz_;
    }
    if (cached_has_bits & 0x00000040u) {
      scalex_ = from.scalex_;
    }
    if (cached_has_bits & 0x00000080u) {
      scaley_ = from.scaley_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      scalez_ = from.scalez_;
    }
    if (cached_has_bits & 0x00000200u) {
      rotatex_ = from.rotatex_;
    }
    if (cached_has_bits & 0x00000400u) {
      rotatey_ = from.rotatey_;
    }
    if (cached_has_bits & 0x00000800u) {
      rotatez_ = from.rotatez_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mmdtranfer.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerState::CopyFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmdtranfer.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void PlayerState::InternalSwap(PlayerState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  motion_.Swap(&other->motion_, &::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(speed_, other->speed_);
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(positionz_, other->positionz_);
  swap(scalex_, other->scalex_);
  swap(scaley_, other->scaley_);
  swap(scalez_, other->scalez_);
  swap(rotatex_, other->rotatex_);
  swap(rotatey_, other->rotatey_);
  swap(rotatez_, other->rotatez_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mmdtranfer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mmdtranfer::MessageHeader* Arena::CreateMaybeMessage< ::mmdtranfer::MessageHeader >(Arena* arena) {
  return Arena::CreateInternal< ::mmdtranfer::MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::mmdtranfer::UserTrend* Arena::CreateMaybeMessage< ::mmdtranfer::UserTrend >(Arena* arena) {
  return Arena::CreateInternal< ::mmdtranfer::UserTrend >(arena);
}
template<> PROTOBUF_NOINLINE ::mmdtranfer::PlayerState* Arena::CreateMaybeMessage< ::mmdtranfer::PlayerState >(Arena* arena) {
  return Arena::CreateInternal< ::mmdtranfer::PlayerState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
