// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mmd_2eproto;
namespace mmdtranfer {
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class PlayerState;
class PlayerStateDefaultTypeInternal;
extern PlayerStateDefaultTypeInternal _PlayerState_default_instance_;
class UserTrend;
class UserTrendDefaultTypeInternal;
extern UserTrendDefaultTypeInternal _UserTrend_default_instance_;
}  // namespace mmdtranfer
PROTOBUF_NAMESPACE_OPEN
template<> ::mmdtranfer::MessageHeader* Arena::CreateMaybeMessage<::mmdtranfer::MessageHeader>(Arena*);
template<> ::mmdtranfer::PlayerState* Arena::CreateMaybeMessage<::mmdtranfer::PlayerState>(Arena*);
template<> ::mmdtranfer::UserTrend* Arena::CreateMaybeMessage<::mmdtranfer::UserTrend>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mmdtranfer {

enum MessageHeader_Versions : int {
  MessageHeader_Versions_VERSION1X = 1
};
bool MessageHeader_Versions_IsValid(int value);
constexpr MessageHeader_Versions MessageHeader_Versions_Versions_MIN = MessageHeader_Versions_VERSION1X;
constexpr MessageHeader_Versions MessageHeader_Versions_Versions_MAX = MessageHeader_Versions_VERSION1X;
constexpr int MessageHeader_Versions_Versions_ARRAYSIZE = MessageHeader_Versions_Versions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_Versions_descriptor();
template<typename T>
inline const std::string& MessageHeader_Versions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageHeader_Versions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageHeader_Versions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageHeader_Versions_descriptor(), enum_t_value);
}
inline bool MessageHeader_Versions_Parse(
    const std::string& name, MessageHeader_Versions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageHeader_Versions>(
    MessageHeader_Versions_descriptor(), name, value);
}
enum MessageHeader_ContentType : int {
  MessageHeader_ContentType_UNIVERSAL = 0,
  MessageHeader_ContentType_UserTrend = 1,
  MessageHeader_ContentType_PlayerState = 2
};
bool MessageHeader_ContentType_IsValid(int value);
constexpr MessageHeader_ContentType MessageHeader_ContentType_ContentType_MIN = MessageHeader_ContentType_UNIVERSAL;
constexpr MessageHeader_ContentType MessageHeader_ContentType_ContentType_MAX = MessageHeader_ContentType_PlayerState;
constexpr int MessageHeader_ContentType_ContentType_ARRAYSIZE = MessageHeader_ContentType_ContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_ContentType_descriptor();
template<typename T>
inline const std::string& MessageHeader_ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageHeader_ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageHeader_ContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageHeader_ContentType_descriptor(), enum_t_value);
}
inline bool MessageHeader_ContentType_Parse(
    const std::string& name, MessageHeader_ContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageHeader_ContentType>(
    MessageHeader_ContentType_descriptor(), name, value);
}
enum UserTrend_TrendType : int {
  UserTrend_TrendType_Join = 0,
  UserTrend_TrendType_Leave = 1,
  UserTrend_TrendType_Watch = 2,
  UserTrend_TrendType_Control = 3
};
bool UserTrend_TrendType_IsValid(int value);
constexpr UserTrend_TrendType UserTrend_TrendType_TrendType_MIN = UserTrend_TrendType_Join;
constexpr UserTrend_TrendType UserTrend_TrendType_TrendType_MAX = UserTrend_TrendType_Control;
constexpr int UserTrend_TrendType_TrendType_ARRAYSIZE = UserTrend_TrendType_TrendType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserTrend_TrendType_descriptor();
template<typename T>
inline const std::string& UserTrend_TrendType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserTrend_TrendType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserTrend_TrendType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserTrend_TrendType_descriptor(), enum_t_value);
}
inline bool UserTrend_TrendType_Parse(
    const std::string& name, UserTrend_TrendType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserTrend_TrendType>(
    UserTrend_TrendType_descriptor(), name, value);
}
// ===================================================================

class MessageHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mmdtranfer.MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mmdtranfer.MessageHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mmd_2eproto);
    return ::descriptor_table_mmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageHeader_Versions Versions;
  static constexpr Versions VERSION1X =
    MessageHeader_Versions_VERSION1X;
  static inline bool Versions_IsValid(int value) {
    return MessageHeader_Versions_IsValid(value);
  }
  static constexpr Versions Versions_MIN =
    MessageHeader_Versions_Versions_MIN;
  static constexpr Versions Versions_MAX =
    MessageHeader_Versions_Versions_MAX;
  static constexpr int Versions_ARRAYSIZE =
    MessageHeader_Versions_Versions_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Versions_descriptor() {
    return MessageHeader_Versions_descriptor();
  }
  template<typename T>
  static inline const std::string& Versions_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Versions>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Versions_Name.");
    return MessageHeader_Versions_Name(enum_t_value);
  }
  static inline bool Versions_Parse(const std::string& name,
      Versions* value) {
    return MessageHeader_Versions_Parse(name, value);
  }

  typedef MessageHeader_ContentType ContentType;
  static constexpr ContentType UNIVERSAL =
    MessageHeader_ContentType_UNIVERSAL;
  static constexpr ContentType UserTrend =
    MessageHeader_ContentType_UserTrend;
  static constexpr ContentType PlayerState =
    MessageHeader_ContentType_PlayerState;
  static inline bool ContentType_IsValid(int value) {
    return MessageHeader_ContentType_IsValid(value);
  }
  static constexpr ContentType ContentType_MIN =
    MessageHeader_ContentType_ContentType_MIN;
  static constexpr ContentType ContentType_MAX =
    MessageHeader_ContentType_ContentType_MAX;
  static constexpr int ContentType_ARRAYSIZE =
    MessageHeader_ContentType_ContentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ContentType_descriptor() {
    return MessageHeader_ContentType_descriptor();
  }
  template<typename T>
  static inline const std::string& ContentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContentType_Name.");
    return MessageHeader_ContentType_Name(enum_t_value);
  }
  static inline bool ContentType_Parse(const std::string& name,
      ContentType* value) {
    return MessageHeader_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageidFieldNumber = 2,
    kContenttypeFieldNumber = 3,
    kBodysizeFieldNumber = 4,
    kVersionFieldNumber = 1,
  };
  // required uint32 messageid = 2 [default = 0];
  bool has_messageid() const;
  void clear_messageid();
  ::PROTOBUF_NAMESPACE_ID::uint32 messageid() const;
  void set_messageid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required .mmdtranfer.MessageHeader.ContentType contenttype = 3 [default = UNIVERSAL];
  bool has_contenttype() const;
  void clear_contenttype();
  ::mmdtranfer::MessageHeader_ContentType contenttype() const;
  void set_contenttype(::mmdtranfer::MessageHeader_ContentType value);

  // required uint32 bodysize = 4 [default = 0];
  bool has_bodysize() const;
  void clear_bodysize();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodysize() const;
  void set_bodysize(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required .mmdtranfer.MessageHeader.Versions version = 1 [default = VERSION1X];
  bool has_version() const;
  void clear_version();
  ::mmdtranfer::MessageHeader_Versions version() const;
  void set_version(::mmdtranfer::MessageHeader_Versions value);

  // @@protoc_insertion_point(class_scope:mmdtranfer.MessageHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 messageid_;
  int contenttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodysize_;
  int version_;
  friend struct ::TableStruct_mmd_2eproto;
};
// -------------------------------------------------------------------

class UserTrend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mmdtranfer.UserTrend) */ {
 public:
  UserTrend();
  virtual ~UserTrend();

  UserTrend(const UserTrend& from);
  UserTrend(UserTrend&& from) noexcept
    : UserTrend() {
    *this = ::std::move(from);
  }

  inline UserTrend& operator=(const UserTrend& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTrend& operator=(UserTrend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserTrend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTrend* internal_default_instance() {
    return reinterpret_cast<const UserTrend*>(
               &_UserTrend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserTrend& a, UserTrend& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTrend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserTrend* New() const final {
    return CreateMaybeMessage<UserTrend>(nullptr);
  }

  UserTrend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserTrend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserTrend& from);
  void MergeFrom(const UserTrend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTrend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mmdtranfer.UserTrend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mmd_2eproto);
    return ::descriptor_table_mmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserTrend_TrendType TrendType;
  static constexpr TrendType Join =
    UserTrend_TrendType_Join;
  static constexpr TrendType Leave =
    UserTrend_TrendType_Leave;
  static constexpr TrendType Watch =
    UserTrend_TrendType_Watch;
  static constexpr TrendType Control =
    UserTrend_TrendType_Control;
  static inline bool TrendType_IsValid(int value) {
    return UserTrend_TrendType_IsValid(value);
  }
  static constexpr TrendType TrendType_MIN =
    UserTrend_TrendType_TrendType_MIN;
  static constexpr TrendType TrendType_MAX =
    UserTrend_TrendType_TrendType_MAX;
  static constexpr int TrendType_ARRAYSIZE =
    UserTrend_TrendType_TrendType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrendType_descriptor() {
    return UserTrend_TrendType_descriptor();
  }
  template<typename T>
  static inline const std::string& TrendType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrendType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrendType_Name.");
    return UserTrend_TrendType_Name(enum_t_value);
  }
  static inline bool TrendType_Parse(const std::string& name,
      TrendType* value) {
    return UserTrend_TrendType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kTrendtypeFieldNumber = 2,
  };
  // required uint64 userid = 1 [default = 0];
  bool has_userid() const;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required .mmdtranfer.UserTrend.TrendType trendtype = 2;
  bool has_trendtype() const;
  void clear_trendtype();
  ::mmdtranfer::UserTrend_TrendType trendtype() const;
  void set_trendtype(::mmdtranfer::UserTrend_TrendType value);

  // @@protoc_insertion_point(class_scope:mmdtranfer.UserTrend)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  int trendtype_;
  friend struct ::TableStruct_mmd_2eproto;
};
// -------------------------------------------------------------------

class PlayerState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mmdtranfer.PlayerState) */ {
 public:
  PlayerState();
  virtual ~PlayerState();

  PlayerState(const PlayerState& from);
  PlayerState(PlayerState&& from) noexcept
    : PlayerState() {
    *this = ::std::move(from);
  }

  inline PlayerState& operator=(const PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerState& operator=(PlayerState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerState* internal_default_instance() {
    return reinterpret_cast<const PlayerState*>(
               &_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerState& a, PlayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerState* New() const final {
    return CreateMaybeMessage<PlayerState>(nullptr);
  }

  PlayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerState& from);
  void MergeFrom(const PlayerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mmdtranfer.PlayerState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mmd_2eproto);
    return ::descriptor_table_mmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotionFieldNumber = 2,
    kUseridFieldNumber = 1,
    kSpeedFieldNumber = 3,
    kPositionxFieldNumber = 4,
    kPositionyFieldNumber = 5,
    kPositionzFieldNumber = 6,
    kScalexFieldNumber = 7,
    kScaleyFieldNumber = 8,
    kScalezFieldNumber = 9,
    kRotatexFieldNumber = 10,
    kRotateyFieldNumber = 11,
    kRotatezFieldNumber = 12,
  };
  // required string motion = 2 [default = "basic"];
  bool has_motion() const;
  void clear_motion();
  const std::string& motion() const;
  void set_motion(const std::string& value);
  void set_motion(std::string&& value);
  void set_motion(const char* value);
  void set_motion(const char* value, size_t size);
  std::string* mutable_motion();
  std::string* release_motion();
  void set_allocated_motion(std::string* motion);

  // required uint64 userid = 1 [default = 0];
  bool has_userid() const;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required float speed = 3;
  bool has_speed() const;
  void clear_speed();
  float speed() const;
  void set_speed(float value);

  // required float positionx = 4;
  bool has_positionx() const;
  void clear_positionx();
  float positionx() const;
  void set_positionx(float value);

  // required float positiony = 5;
  bool has_positiony() const;
  void clear_positiony();
  float positiony() const;
  void set_positiony(float value);

  // required float positionz = 6;
  bool has_positionz() const;
  void clear_positionz();
  float positionz() const;
  void set_positionz(float value);

  // required float scalex = 7;
  bool has_scalex() const;
  void clear_scalex();
  float scalex() const;
  void set_scalex(float value);

  // required float scaley = 8;
  bool has_scaley() const;
  void clear_scaley();
  float scaley() const;
  void set_scaley(float value);

  // required float scalez = 9;
  bool has_scalez() const;
  void clear_scalez();
  float scalez() const;
  void set_scalez(float value);

  // required float rotatex = 10;
  bool has_rotatex() const;
  void clear_rotatex();
  float rotatex() const;
  void set_rotatex(float value);

  // required float rotatey = 11;
  bool has_rotatey() const;
  void clear_rotatey();
  float rotatey() const;
  void set_rotatey(float value);

  // required float rotatez = 12;
  bool has_rotatez() const;
  void clear_rotatez();
  float rotatez() const;
  void set_rotatez(float value);

  // @@protoc_insertion_point(class_scope:mmdtranfer.PlayerState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_motion_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motion_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  float speed_;
  float positionx_;
  float positiony_;
  float positionz_;
  float scalex_;
  float scaley_;
  float scalez_;
  float rotatex_;
  float rotatey_;
  float rotatez_;
  friend struct ::TableStruct_mmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// required .mmdtranfer.MessageHeader.Versions version = 1 [default = VERSION1X];
inline bool MessageHeader::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageHeader::clear_version() {
  version_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mmdtranfer::MessageHeader_Versions MessageHeader::version() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.MessageHeader.version)
  return static_cast< ::mmdtranfer::MessageHeader_Versions >(version_);
}
inline void MessageHeader::set_version(::mmdtranfer::MessageHeader_Versions value) {
  assert(::mmdtranfer::MessageHeader_Versions_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.MessageHeader.version)
}

// required uint32 messageid = 2 [default = 0];
inline bool MessageHeader::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageHeader::clear_messageid() {
  messageid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::messageid() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.MessageHeader.messageid)
  return messageid_;
}
inline void MessageHeader::set_messageid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  messageid_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.MessageHeader.messageid)
}

// required .mmdtranfer.MessageHeader.ContentType contenttype = 3 [default = UNIVERSAL];
inline bool MessageHeader::has_contenttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageHeader::clear_contenttype() {
  contenttype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mmdtranfer::MessageHeader_ContentType MessageHeader::contenttype() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.MessageHeader.contenttype)
  return static_cast< ::mmdtranfer::MessageHeader_ContentType >(contenttype_);
}
inline void MessageHeader::set_contenttype(::mmdtranfer::MessageHeader_ContentType value) {
  assert(::mmdtranfer::MessageHeader_ContentType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  contenttype_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.MessageHeader.contenttype)
}

// required uint32 bodysize = 4 [default = 0];
inline bool MessageHeader::has_bodysize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageHeader::clear_bodysize() {
  bodysize_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::bodysize() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.MessageHeader.bodysize)
  return bodysize_;
}
inline void MessageHeader::set_bodysize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  bodysize_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.MessageHeader.bodysize)
}

// -------------------------------------------------------------------

// UserTrend

// required uint64 userid = 1 [default = 0];
inline bool UserTrend::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTrend::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserTrend::userid() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.UserTrend.userid)
  return userid_;
}
inline void UserTrend::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.UserTrend.userid)
}

// required .mmdtranfer.UserTrend.TrendType trendtype = 2;
inline bool UserTrend::has_trendtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTrend::clear_trendtype() {
  trendtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mmdtranfer::UserTrend_TrendType UserTrend::trendtype() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.UserTrend.trendtype)
  return static_cast< ::mmdtranfer::UserTrend_TrendType >(trendtype_);
}
inline void UserTrend::set_trendtype(::mmdtranfer::UserTrend_TrendType value) {
  assert(::mmdtranfer::UserTrend_TrendType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  trendtype_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.UserTrend.trendtype)
}

// -------------------------------------------------------------------

// PlayerState

// required uint64 userid = 1 [default = 0];
inline bool PlayerState::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerState::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerState::userid() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.userid)
  return userid_;
}
inline void PlayerState::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.userid)
}

// required string motion = 2 [default = "basic"];
inline bool PlayerState::has_motion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerState::clear_motion() {
  motion_.ClearToDefaultNoArena(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerState::motion() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.motion)
  return motion_.GetNoArena();
}
inline void PlayerState::set_motion(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  motion_.SetNoArena(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get(), value);
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.motion)
}
inline void PlayerState::set_motion(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  motion_.SetNoArena(
    &::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmdtranfer.PlayerState.motion)
}
inline void PlayerState::set_motion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  motion_.SetNoArena(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmdtranfer.PlayerState.motion)
}
inline void PlayerState::set_motion(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  motion_.SetNoArena(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmdtranfer.PlayerState.motion)
}
inline std::string* PlayerState::mutable_motion() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:mmdtranfer.PlayerState.motion)
  return motion_.MutableNoArena(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get());
}
inline std::string* PlayerState::release_motion() {
  // @@protoc_insertion_point(field_release:mmdtranfer.PlayerState.motion)
  if (!has_motion()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return motion_.ReleaseNonDefaultNoArena(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get());
}
inline void PlayerState::set_allocated_motion(std::string* motion) {
  if (motion != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  motion_.SetAllocatedNoArena(&::mmdtranfer::PlayerState::_i_give_permission_to_break_this_code_default_motion_.get(), motion);
  // @@protoc_insertion_point(field_set_allocated:mmdtranfer.PlayerState.motion)
}

// required float speed = 3;
inline bool PlayerState::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerState::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PlayerState::speed() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.speed)
  return speed_;
}
inline void PlayerState::set_speed(float value) {
  _has_bits_[0] |= 0x00000004u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.speed)
}

// required float positionx = 4;
inline bool PlayerState::has_positionx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerState::clear_positionx() {
  positionx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PlayerState::positionx() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.positionx)
  return positionx_;
}
inline void PlayerState::set_positionx(float value) {
  _has_bits_[0] |= 0x00000008u;
  positionx_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.positionx)
}

// required float positiony = 5;
inline bool PlayerState::has_positiony() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerState::clear_positiony() {
  positiony_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PlayerState::positiony() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.positiony)
  return positiony_;
}
inline void PlayerState::set_positiony(float value) {
  _has_bits_[0] |= 0x00000010u;
  positiony_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.positiony)
}

// required float positionz = 6;
inline bool PlayerState::has_positionz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerState::clear_positionz() {
  positionz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PlayerState::positionz() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.positionz)
  return positionz_;
}
inline void PlayerState::set_positionz(float value) {
  _has_bits_[0] |= 0x00000020u;
  positionz_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.positionz)
}

// required float scalex = 7;
inline bool PlayerState::has_scalex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerState::clear_scalex() {
  scalex_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PlayerState::scalex() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.scalex)
  return scalex_;
}
inline void PlayerState::set_scalex(float value) {
  _has_bits_[0] |= 0x00000040u;
  scalex_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.scalex)
}

// required float scaley = 8;
inline bool PlayerState::has_scaley() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerState::clear_scaley() {
  scaley_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float PlayerState::scaley() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.scaley)
  return scaley_;
}
inline void PlayerState::set_scaley(float value) {
  _has_bits_[0] |= 0x00000080u;
  scaley_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.scaley)
}

// required float scalez = 9;
inline bool PlayerState::has_scalez() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerState::clear_scalez() {
  scalez_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float PlayerState::scalez() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.scalez)
  return scalez_;
}
inline void PlayerState::set_scalez(float value) {
  _has_bits_[0] |= 0x00000100u;
  scalez_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.scalez)
}

// required float rotatex = 10;
inline bool PlayerState::has_rotatex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerState::clear_rotatex() {
  rotatex_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float PlayerState::rotatex() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.rotatex)
  return rotatex_;
}
inline void PlayerState::set_rotatex(float value) {
  _has_bits_[0] |= 0x00000200u;
  rotatex_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.rotatex)
}

// required float rotatey = 11;
inline bool PlayerState::has_rotatey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerState::clear_rotatey() {
  rotatey_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float PlayerState::rotatey() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.rotatey)
  return rotatey_;
}
inline void PlayerState::set_rotatey(float value) {
  _has_bits_[0] |= 0x00000400u;
  rotatey_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.rotatey)
}

// required float rotatez = 12;
inline bool PlayerState::has_rotatez() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerState::clear_rotatez() {
  rotatez_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float PlayerState::rotatez() const {
  // @@protoc_insertion_point(field_get:mmdtranfer.PlayerState.rotatez)
  return rotatez_;
}
inline void PlayerState::set_rotatez(float value) {
  _has_bits_[0] |= 0x00000800u;
  rotatez_ = value;
  // @@protoc_insertion_point(field_set:mmdtranfer.PlayerState.rotatez)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mmdtranfer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mmdtranfer::MessageHeader_Versions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mmdtranfer::MessageHeader_Versions>() {
  return ::mmdtranfer::MessageHeader_Versions_descriptor();
}
template <> struct is_proto_enum< ::mmdtranfer::MessageHeader_ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mmdtranfer::MessageHeader_ContentType>() {
  return ::mmdtranfer::MessageHeader_ContentType_descriptor();
}
template <> struct is_proto_enum< ::mmdtranfer::UserTrend_TrendType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mmdtranfer::UserTrend_TrendType>() {
  return ::mmdtranfer::UserTrend_TrendType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mmd_2eproto
